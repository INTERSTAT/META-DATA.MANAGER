<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataStore.Interface</name>
    </assembly>
    <members>
        <member name="F:DataStore.Interface.DataStoreConfig.connStr">
            <summary>
            Stringa di connessione al DB
            </summary>
        </member>
        <member name="F:DataStore.Interface.DataStoreConfig.schema">
            <summary>
            Schema da utilizzare per l'acceso ai dati
            </summary>
        </member>
        <member name="F:DataStore.Interface.DataStoreConfig.idField">
            <summary>
            Nome del campo utilizzato come chiave primaria delle entità
            </summary>
        </member>
        <member name="F:DataStore.Interface.DataStoreConfig.idFieldLength">
            <summary>
            Lunghezza del campo chiave
            </summary>
        </member>
        <member name="F:DataStore.Interface.DataStoreConfig.idFieldPrefixLength">
            <summary>
            Lunghezza del prefisso del campo chiave
            </summary>
        </member>
        <member name="F:DataStore.Interface.DataStoreConfig.DateFormat">
            <summary>
            Indica il formato della data.
            </summary>
        </member>
        <member name="F:DataStore.Interface.DataStoreConfig.DecimalSeparator">
            <summary>
            Indica il carattere utilizzato per separare le cifre decimali da quelle intere.
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.DataProviderName">
            <summary>
            DataProvider Name del datastore
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.DataProviderType">
            <summary>
            DataProvider Type del datastore
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.Database">
            <summary>
            Restituisce il database della connessione.
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.Schema">
            <summary>
            Restituisce lo schema da utilizzare nelle query.
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.PARAM_PREFIX">
            <summary>
            Return prefix for DbParamater
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Avvia una transazione.
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.CommitTransaction">
            <summary>
            Salva una transazione.
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.RollbackTransaction">
            <summary>
            Annulla una transazione.
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.ExecuteCommand(System.String,DataStore.Interface.STKeyValuePair[],System.Int32,System.Data.IDbTransaction)">
            <summary>
            Esegue il comando indicato con parametri. Attenzione, lascia la connessione nello stato in cui è.
            </summary>
            <param name="cmdTxt"></param>
            <param name="parameters"></param>
            <param name="timeout"></param>
            <param name="sqlTrans"></param>
        </member>
        <member name="M:DataStore.Interface.IDataStore.ExecuteStoreProcedure(System.String,DataStore.Interface.STKeyValuePair[])">
            <summary>
            Esegue una store procedure con dei parametri
            </summary>
            <param name="spName"></param>
            <param name="spParams"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetTable(System.String,DataStore.Interface.STKeyValuePair[],System.Data.IDbTransaction)">
            <summary>
            Riempie una tabella con la query indicata e la restituisce.
            </summary>
            <param name="cmdTxt"></param>
            <param name="parameters"></param>
            <param name="sqlTrans"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.ExecuteScalar(System.String,DataStore.Interface.STKeyValuePair[],System.Data.IDbTransaction)">
            <summary>
            Restituisce il valore della prima colonna della prima riga della query indicata.
            </summary>
            <param name="cmdTxt"></param>
            <param name="parameters"></param>
            <param name="sqlTrans"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.WriteBulk(System.String,System.Data.DataTable,System.Nullable{System.Int32})">
            <summary>
            Effettua una bulk copy.
            </summary>
            <param name="destTableName"></param>
            <param name="tbToWrite"></param>
        </member>
        <member name="M:DataStore.Interface.IDataStore.WriteBulk(System.String,System.Data.DataRow[],System.Nullable{System.Int32})">
            <summary>
            Effettua una bulk copy.
            </summary>
            <param name="destTableName"></param>
            <param name="rowsToWrite"></param>
        </member>
        <member name="M:DataStore.Interface.IDataStore.UpdateChanges(System.Data.DataTable,System.Data.IDbTransaction)">
            <summary>
            Effettua il salvataggio dei dati nel DataTable.
            Esegue le operazionidi Delete/Insert/Update in funzione dello stato delle righe
            Se necessario utilizza operazioni Bulk.
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.UpdateChanges(System.Data.DataSet,System.Data.IDbTransaction)">
            <summary>
            Effettua il salvataggio di tutte le tabelle del database 
            Se necessario utilizza operazioni Bulk.
            Esegue le operazionidi Delete/Insert/Update in funzione dello stato delle righe
            Esegue un analisi delle relazioni per determinare l'ordine di aggiornamento
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.InsertUpdateData(System.Data.DataTable,System.Data.IDbTransaction)">
            <summary>
            Effettua il salvataggio di una tabella in bulk verificando quali righe inserire e quali aggiornare
            </summary>
            <param name="tbl"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetPagedQuery(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Restituisce la query paginata a partire dalla query indicata.
            </summary>
            <param name="query"></param>
            <param name="sortColumn"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortByDesc"></param>
            <param name="selCols"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetSelectString(System.String,System.String[])">
            <summary>
            Restituisce la stringa da utilizzare per una select a partire dai nomi dei campi.
            Effettua gli escape necessari quando i campi coincidono con parole chiave.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetViewDefinition(System.String)">
            <summary>
            Restituisce la definizione della view indicata.
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetTableScript(System.Data.DataTable,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restituisce lo script di creazione della tabella a partire dal DataTable indicato.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetCreateTableFromSelectScript(System.String,System.String)">
            <summary>
            Restituisce lo script per creare una tabella direttamente da una query
            </summary>
            <param name="tableName"></param>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetTableDefinition(System.String)">
            <summary>
            Restituisce la struttura della tabella indicata leggendo la definizione dal DB.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:DataStore.Interface.IDataStore.END_MERGE_CHAR">
            <summary>
            Restituisce il carattere di chiusura delle espressioni MERGE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetUpdateScript(System.String,System.String,System.Collections.Generic.ICollection{System.Data.DataColumn},System.Collections.Generic.ICollection{System.Data.DataColumn},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Restituisce uno script per aggiornare una tabella a partire da un'altra
            </summary>
            <param name="srcTableName"></param>
            <param name="destTableName"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetDateDifferenceExpression(System.String,System.String,DataStore.Interface.DateDiffPartEnum)">
            <summary>
            Restituisce l'espressione per ottenere la differenza tra due date espressa nell'unità di misura indicata da dateDiffPart.
            </summary>
            <param name="startDateField"></param>
            <param name="endDateField"></param>
            <param name="dateDiffPart"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetCurrentDateExpression">
            <summary>
            Restituisce l'espressione per ottenere la data corrente.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.IdentityColumnExpression(System.Int32,System.Int32)">
            <summary>
            Restituisce l'espressione per identificare una colonna come identity durante la creazione di una tabella.
            </summary>
            <param name="seed"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetParseDateExpression(System.String,System.String)">
            <summary>
            Restituisce l'espressione per fare il parse di una data secondo un certo formato.
            </summary>
            <param name="dateExpr"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetShrinkFileExpression">
            <summary>
            Restituisce l'espressione per fare lo shrink del file di transaction log del db.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetBitAndOperationExpression(System.String,System.String)">
            <summary>
            Restituisce l'espressione per calcolare l'and bit a bit del campo indicato con il valore indicato.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetBitOrOperationExpression(System.String,System.String)">
            <summary>
            Restituisce l'espressione per calcolare l'or bit a bit del campo indicato con il valore indicato.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="P:DataStore.Interface.IDataStore.IDField">
            <summary>
            Restituisce il nome delle PK (da file di configurazione)
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.IDFieldLength">
            <summary>
            Restituisce la lunghezza del campo chiave primaria
            </summary>
        </member>
        <member name="P:DataStore.Interface.IDataStore.IDFieldPrefixLength">
            <summary>
            Restituisce la lunghezza del prefisso della chiave primaria
            </summary>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetExistingTables(System.String,System.String)">
            <summary>
            Restituisce i nomi delle tabelle esistenti nel db applicando un eventuale filtro sui nomi
            Per ora sul filtro facciamo inizia per, poi vediamo come estendere
            </summary>
            <param name="nameFilter"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetExistingViews(System.String,System.String)">
            <summary>
            Restituisce i nomi delle view esistenti nel db applicando un eventuale filtro sui nomi
            Per ora sul filtro facciamo inizia per, poi vediamo come estendere
            </summary>
            <param name="nameFilter"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.ExistsTable(System.String,System.String)">
            <summary>
            Verifica se una tabella esiste nel database
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.ExistsView(System.String,System.String)">
            <summary>
            Verifica se una view esiste nel database
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetDateTextRepresentation(System.DateTime)">
            <summary>
            Restituisce la rappresentazione testuale di una data.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetDoubleTextRepresentation(System.Double)">
            <summary>
            Restituisce la rappresentazione testuale di un double.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetPersistedHashColumnExpression(System.Collections.Generic.List{System.Data.DataColumn})">
            <summary>
            Restituisce l'espressione per calcolare la funzione hash della concatenazione dei valori delle colonne passate come parametro
            </summary>
            <param name="cols">elenco di nomi delle colonne</param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.UCaseExpressionNCS(System.String)">
            <summary>
            Trasforma un espressione in ucase per usarla in una query in modalità non case sensitive.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.WriteTempTable(System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            Scrive la tabella indicata in una tabella temporanea. Restituisce il nome della tabella.
            </summary>
            <param name="tbToWrite"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetTopNRowsQuery(System.String,System.Int32)">
            <summary>
            Restituisce la query per ottenere le prime N righe a partire dal comando passato.
            </summary>
            <param name="cmdTxt"></param>
            <param name="numRows"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetTableMetadata(System.String)">
            <summary>
            Restituisce i metadati di una tabella
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DataStore.Interface.IDataStore.GetParameter(DataStore.Interface.ColumnDefinition,System.Object)">
            <summary>
            Get a parameter for query
            </summary>
            <param name="columnDefinition"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:DataStore.Interface.STKeyValuePair">
            <summary>
            Rappresenta una coppia chiave valore serializzabile.
            </summary>
        </member>
        <member name="P:DataStore.Interface.STKeyValuePair.Key">
            <summary>
            Imposta o restituisce la chiave.
            </summary>
        </member>
        <member name="P:DataStore.Interface.STKeyValuePair.Value">
            <summary>
            Imposta o restituisce il valore.
            </summary>
        </member>
        <member name="P:DataStore.Interface.STKeyValuePair.ParamType">
            <summary>
            Imposta o restituisce il valore.
            </summary>
        </member>
    </members>
</doc>
